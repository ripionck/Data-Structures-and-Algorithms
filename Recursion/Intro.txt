Recursion is a programming technique where a function calls itself in order to solve a problem. It is often used to sove problems that can be broken down into smaller, similar sub-problems. The recursive approach typically involves a base case, which stops the recursion, and a recursive case, which continues the recursion.

# Recursion and Memory Visualization
When a recursive function is called, each call is placed on the call stack, which is a data structure that stores information about the active subroutines of a computer program. Each recursive call creates a new frame on the stack, which includes the function's parameters, local variables, and the return address. This continues until the base case is reached, at which point the function begins to return and the stack unwinds.


# Direct vs Indirect Recursion
Direct Recursion: This occurs when a function is calls itself directly.

def direct_recursion(n):
    if n <= 0:
        return
    print(n)
    direct_recursion(n-1)

Indirect Recursion: This occurs when a function calls another function, which in turn calls the first function.

def func_a(n):
    if n <= 0:
        return
    print(n)
    func_b(n-1)

def func_b(n):
    if n <= 0:
        return
    print(n)
    func_a(n-1)

# How the Call Stack works with recursive calls
1. Function Call: When a function is called, a new stack frame is created and pushed onto the call stack.
This frame contains:
- The function's prarmeters.
- Local variables.
- The return address (where to return after the function completess).

2. Recursice Call: In recursion, a function callls itself. Each recursive call creates a new stack frame, which is pushed onto the stack. This continues until the base case is reached.

3. Base Case: The base case is a condition that stops the recursion. When a recursive function reaches its base case, it begins to return, and the stack frames start to be popped off the stack.

4. Returning from Calls: As each recursive call completes, it stack frame is popped off the stack, and control returns to the previous frame. This process continues until all frames are removed, and the initila call completes.